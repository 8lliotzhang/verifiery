import tkinter as tk
from tkinter import ttk
from openai import OpenAI
import re
import os
import csv
import math
from collections import Counter

# OpenAI API Key
client = OpenAI(
api_key = "paste_here"
#PASTE IN THE CORRECT KEY
)


#OBS Block
def load_global_frequencies_csv(file_name):
    """Load global word frequencies from a CSV file."""
    frequencies = {}
    total_words_in_global = 0

    script_dir = os.path.dirname(os.path.abspath(__file__))
    file_path = os.path.join(script_dir, file_name)

    try:
        with open(file_path, 'r', encoding='utf-8') as file:
            reader = csv.reader(file)
            next(reader)  # Skip header row
            for row in reader:
                word, freq = row
                frequencies[word.lower()] = float(freq)
                total_words_in_global += float(freq)
    except FileNotFoundError:
        print(f"Error: File '{file_name}' not found at path: {file_path}")
    except Exception as e:
        print(f"Error reading file '{file_name}': {e}")

    return frequencies, total_words_in_global

def calculate_obscurity(word, global_frequencies, total_words_in_global, essay_word_count):
    """Calculate the obscurity for a single word."""
    if word not in global_frequencies:
        return None  # Skip words not in the global frequencies

    # ChatGPT's usage: 1 / total words in the essay
    chatgpt_usage = 1 / essay_word_count
    
    # Global usage: frequency of the word / total words in the global corpus
    global_usage = global_frequencies[word] / total_words_in_global

    # Calculate obscurity (log ratio)
    obscurity = math.log(chatgpt_usage / global_usage, 2)
    return obscurity

def remove_lowest_outliers(obscurities, count=10):
    """Remove the N lowest obscurity outliers."""
    sorted_obscurities = sorted(obscurities, key=lambda x: x[1])  # Sort by obscurity values
    return sorted_obscurities[count:]  # Remove the first 'count' elements

def generate_essay(essay_word_count, thesis):
    """Generate an essay using OpenAI with the same thesis and roughly the same word count."""
    prompt = f"Generate an essay based on the thesis: '{thesis}'. The essay should be approximately {essay_word_count} words long."
    completion = client.chat.completions.create(
        model="gpt-4",
        messages=[
            {"role": "system", "content": "Please generate an essay."},
            {"role": "user", "content": prompt}
        ]
    )
    return completion.choices[0].message.content

def main2(obscurityInput):
    print("Calculating obscurity for an input essay...\n")
    print("Enter your essay (press Ctrl+D to finish):")

    # Load global word frequencies
    global_word_frequencies, total_words_in_global = load_global_frequencies_csv('unigram_freq.csv')

    if not global_word_frequencies:
        print("Failed to load global word frequencies. Exiting...")
        return

    # Take essay input from the user
    essay = obscurityInput
  
    # Count words in the essay
    words = re.findall(r'\b\w+\b', essay.lower())  # Extract words
    essay_word_count = len(words)

    # Calculate obscurity for each word, including repetitions
    word_obscurities = []
    for word in words:  # Loop through each individual word, including repetitions
        obscurity = calculate_obscurity(word, global_word_frequencies, total_words_in_global, essay_word_count)
        if obscurity is not None:
            word_obscurities.append((word, obscurity))

    # Display the individual words and their obscurity scores
    print("\nWord Obscurities for the input essay:")
    for word, obscurity in word_obscurities:
        print(f"{word}: {obscurity:.4f}")

    # Remove the 10 lowest outliers before calculating average obscurity
    filtered_word_obscurities = remove_lowest_outliers(word_obscurities, count=10)

    # Calculate the average obscurity score for the input essay
    if filtered_word_obscurities:
        average_obscurity_input = sum([obscurity for _, obscurity in filtered_word_obscurities]) / len(filtered_word_obscurities)
    else:
        average_obscurity_input = 0

    print(f"\nAverage Obscurity for the input essay (after removing outliers): {average_obscurity_input:.4f}")

    # Generate 3 essays based on the same thesis and roughly the same word count
    thesis = " ".join(essay.split('.')[:2])  # Get the first two sentences to form the thesis
    generated_essays = []
    for _ in range(3):  # Generate 3 essays
        generated_essay = generate_essay(essay_word_count, thesis)
        generated_essays.append(generated_essay)

    # Calculate the obscurity for each generated essay and compute the average
    average_obscurity_generated_essays = 0
    for generated_essay in generated_essays:
        # Count words in the generated essay
        words_generated = re.findall(r'\b\w+\b', generated_essay.lower())
        essay_word_count_generated = len(words_generated)

        # Calculate obscurity for each word in the generated essay
        word_obscurities_generated = []
        for word in words_generated:
            obscurity = calculate_obscurity(word, global_word_frequencies, total_words_in_global, essay_word_count_generated)
            if obscurity is not None:
                word_obscurities_generated.append((word, obscurity))

        # Remove the 10 lowest outliers before calculating average obscurity for the generated essay
        filtered_word_obscurities_generated = remove_lowest_outliers(word_obscurities_generated, count=10)

        # Calculate the average obscurity score for the generated essay
        if filtered_word_obscurities_generated:
            average_obscurity_generated = sum([obscurity for _, obscurity in filtered_word_obscurities_generated]) / len(filtered_word_obscurities_generated)
        else:
            average_obscurity_generated = 0

        average_obscurity_generated_essays += average_obscurity_generated

    # Average obscurity score for the 3 generated essays
    average_obscurity_generated_essays /= 3

    print(f"\nAverage Obscurity for the 3 generated essays (after removing outliers): {average_obscurity_generated_essays:.4f}")

    # Compare the two average obscurity scores
    if abs(average_obscurity_input - average_obscurity_generated_essays) / average_obscurity_input <= 0.12:
        print("\nResult: AI")
    else:
        print("\nResult: HUMAN")

# AFB Constants
MAX_CHARS = 10000
instructions = (
    "You are an AI model used to check if text has been written by humans or generated by an AI model. Please consider the following factors:"
    "If the text is too short (less than 50 words), reject it as it is too short to determine whether it is AI or not."
    "Language: AI-generated text often uses larger complex words while having a simpler meaning."
    "Structure: AI has smooth flow in text, overly polished, Predictable pattern of explanation and evidence. Humans tend to vary sentence structure more, and use more complex structures."
    "Analysis: AI-generated text and human text often contain detailed literary analysis, if applicable."
    "Tone and Vocab: AI generated texts have an overly formal, stiff, impersonal style. Be careful not to flag formal but human text as AI-generated!"
    "Ideas: AI generated models tend to have bland ideas or repeat them throughout the text."
    "Perplexity: Determine how consistent the provided text is with the output of an AI language model. A high perplexity increases the likelihood of the text being AI-generated."
    "Burstiness: Determine how consistent the perplexity of the text is. While human text may write one or two sentences that are similar to AI output, they will generally have output that resembles human output. Higher consistency means a lower burstiness - and means the text is more likely to be AI-generated."
    "Word Choice: often AI will use large, long or complicated words, while human writers (especially at the high school level) will tend to prefer shorter words. Please keep in mind the consistency in the usage of short and long words throughout the text."
    "Please generate your thought process or an internal monologue as you determine whether the provided text is AI-generated or human. At the end, list some of the contributing factors which make the text seem AI-generated, and some factors making the text seem human."
    "Make reference to, highlight, and quote specific phrases from the input which influenced your decision or your views on the work."
    "Provide a narrated train of thought or inner monologue as you are guided to the decision."
    "you are to be impartial - not biased towards either side, but please be confident in your results."
    "Human-written text may reflect consistency in academic writing, especially for academic assignments, which might not showcase high burstiness if focusing on clarity and coherence."
    "Output your confidence as a decimal value between 0 and 1 that the text was generated by AI. 0 means that you are certain the text was generated by a human. 1 means you are certain the text was generated by AI."
    "Finally, provide a verdict. your options are (Very Likely Human, Likely Human, Inconclusive, Likely AI, Very Likely AI)."
    "Output strictly in the following format, maintaining the round brackets: 'response:([plaintext overview])\nverdict:([verdict])\nscore:([AI confidence score: 2 place decimal between 0 and 1])."
    "ensure that the round brackets are correctly placed, especially between the score decimal value. It must be perfectly formatted every time."
)# Define instructions here
HumanSamples = (
    "here are examples of human written essays:"
    "The Impact of Stereotypes in William Shakespeare’s Othello William Shakespeare uses authorial tools in Othello to present the global issue of how stereotypes impact how one perceives the world. Shakespeare begins with the use of situational irony, as Othello defends himself from Brabantio’s claims. Othello starts by mentioning his plain speech and how he is “little bless'd with the soft phrase of peace” (1.3.82). The irony lies in how Othello, despite saying otherwise, speaks with the elegance of civilian speech in a calm and collected manner. However, he states this as he is black and consequently believes his speech is considered uneducated and savage. Next, Shakepeare uses diction to show how women are stereotyped, when Othello concludes his defence, stating that instead of stealing Desdemona with magic, “I won his daughter.” (1.3.94). In saying this, Desdemona is perceived as a prize or a spoil of war in a battle between Othello and Brabantio. As a woman, she becomes objectified and seen as belonging to either her father or her husband, instead of a unique human being. Finally, Shakespeare uses a rhetorical question to show Brabantio’s emotions regarding the relationship between Desdemona and Othello in his response to Othello, as he asks that “she, in spite of nature,/Of years, of country, credit, every thing,/To fall in love with what she fear'd to look on?” (1.3.96-98). Through the question, Brabantio highlights the plausibility that Desdemona would love Othello, accounting for factors such as how Brabantio perceives the nature of Othello. Since Brabantio sees Othello as barbaric and imperfect due to his skin, he is unable to accept the idea that Desdemona could willingly go with Othello. To conclude, Shakespeare’s use of situational irony, diction, and rhetorical questions help to present how stereotypes impact his characters’ perception of the world."
    "Literary Paragraph Illustrating the Degree of Iago’s Jealousy and Manipulative Nature  In Othello, William Shakespeare develops Iago as a character who’s jealousy of others’ success fuels his manipulative nature. Iago’s behavior is showcased through the use of situational irony, metaphor, repetition, and simile. In the beginning of Act 1, Iago’s jealousy is first demonstrated when he perceives Cassio as unworthy of lieutenant due to him having no practical military experience. Shakespeare compares Cassio to “a great arithmetician (...) unless the bookish theoric” (I. i. 19-24), highlighting Iago’s jealousy of Cassio being promoted by Othello to a position that he himself desired. The use of a metaphor comparing Cassio to a spinster and an arithmetician emphasizes Iago’s perception of Cassio's military inexperience. Cassio’s promotion, despite his inexperience, causes Iago to feel jealous as he believes his experience in battle is worth more than Cassio’s rhetoric. Iago’s jealousy towards Cassio’s promotion thus fuels his manipulative nature, since he uses his shared disdain of Cassio and Othello in order to manipulate Roderigo to take his side. The same level of jealousy and manipulation that Iago has emerges when he tells Roderigo “I could never (...) but put money in thy purse” (I. iii. 334-341). Due to Othello’s background, Iago believes that Othello does not deserve his romantic success and is envious of his relationship with Desdemona, thus fuelling his desire to undermine Othello. By calling Othello a moor and saying that his love is unsustainable, Iago hides his envy, since someone who he believes is racially inferior has won the love of a woman he believes is beyond their worth. Furthermore, Iago’s jealousy towards Othello causes him to emotionally manipulate Roderigo. Through repeatedly telling Roderigo to put money in thy purse and that Desdemona’s relationship is destined to fail, Iago emotionally manipulates Roderigo so he believes that if he finances Iago’s plans, he will be able to win Desdemona’s love. The use of situational irony also adds to Iago’s manipulative nature, since he seems like he wants to help Roderigo win Desdemona’s love stating “ I could never better stead thee than now” (I. iii. 334-335), but in reality all Iago wants is the financing of his plan using Roderigo’s money. After Roderigo agrees to finance Iago’s plans of revenge, Iago criticizes Othello by saying “The Moor is (...) as asses are”(I. iii. 390-393), highlighting his manipulative nature and jealousy towards Othello’s character. Despite Othello’s achievements and high status, Iago fixates on Othello’s race by calling him a moor, revealing that he is jealous that Othello, a racially inferior outsider, has achieved more than he has. Shakespeare’s use of a simile comparing Othello to an ass not only highlights Iago’s perception of Othello being less than human, but also how Iago thinks Othello can be easily manipulated and controlled just like how donkeys are led by a rope. Moreover, by describing Othello as someone who “thinks men (...) led by the nose” (I. iii. 391-392), Iago hints that he thinks Othello is too trusting and naive, and plans on manipulating these vulnerabilities in order to undermine Othello. By showcasing Iago’s jealousy and manipulative nature towards the other characters, one can consider the global issue of how the hierarchy of power can lead individuals to engage in covert activities due to perceived inequality. Throughout Act 1, Iago’s jealousy of others’ success exposes his disregard for anything but his personal gain, thus developing and fuelling his manipulative nature."
)
AiSamples = (
    "here are examples of AI-generated essays:"
    "The Tragic Demise of Othello: The Role of Dramatic Irony in Shakespeare's Masterpiece - William Shakespeare's 'Othello' is a dramatic juggernaut, a tapestry woven with themes of jealousy, betrayal, and the destructive power of deceit. At the heart of the play is the tragic hero, Othello, whose fall from grace is both profound and inevitable. One of the most potent literary devices Shakespeare employs to underscore Othello's tragic arc is dramatic irony, which amplifies the tension and emotional impact of the play. Dramatic irony occurs when the audience knows more about a situation than the characters involved, creating a sense of anticipation and dread for what is to come. In 'Othello', Shakespeare masterfully uses dramatic irony to reveal the extent of Iago's deception and Othello's subsequent downfall. This technique engages the audience in a deeper emotional experience as they witness the tragic hero being ensnared by Iago’s machinations, all the while powerless to alter the course of events they see unfolding with devastating inevitability. One of the clearest examples of dramatic irony in 'Othello' is the deception surrounding Desdemona's fidelity. From the outset, the audience is made aware of Iago's duplicitous intentions and his plan to poison Othello's mind against his innocent wife. When Iago says, 'I am not what I am' (Act 1, Scene 1), the audience becomes privy to his true nature and sinister goals. However, Othello remains blissfully ignorant of Iago's scheming, trusting him as an honest advisor. This misplaced trust is agony for the audience, as they are forced to watch Othello vilify and doubt Desdemona despite knowing her true innocence. The handkerchief becomes a pivotal symbol of deceit and dramatic irony. To Othello, it is the token of love shared between him and Desdemona, yet it is transformed by Iago into “ocular proof” of her infidelity. Othello's fixation on the handkerchief as evidence of wrongdoing is deeply ironic, for the audience knows that it is merely a trinket manipulated by Iago to serve his own end. Shakespeare uses this prop to heighten the dramatic irony, as the audience understands the handkerchief’s true journey while Othello is consumed by jealous rage. The crescendo of dramatic irony peaks in Act 5, as the denouement approaches. The audience is acutely aware that Othello's actions are based entirely on Iago's lies. As evidence aligns against Iago—a truth we have long known—the tragic hero makes his fateful decision to murder Desdemona. Shakespeare crafts this scene with intense pathos, using the audience’s superior knowledge to heighten the tragic waste of life and love. This powerful use of dramatic irony not only engages the audience but also serves as a poignant commentary on the destructive nature of jealousy and the vulnerability of trust. In conclusion, Shakespeare's use of dramatic irony in 'Othello' is a testament to his storytelling genius. It creates a sustained tension that grips the audience, compelling them to see Othello's tragic demise unfold despite their awareness of the truth. Through this literary device, Shakespeare lays bare the pernicious power of deceit and the tragic consequences of misplaced trust, leaving a searing impact that resonates far beyond the play’s final lines. As such, 'Othello' remains a timeless exploration of human frailty, masterfully underscored by the devastating effectiveness of dramatic irony."
    "**The Tragic Flaws of Othello: An Exploration of Jealousy and Manipulation in Shakespeare's Othello** William Shakespeare's 'Othello' is a timeless tragedy that delves into the destructive nature of jealousy and the devastating effects of manipulation. At its core, the play explores the vulnerabilities of human nature, encapsulated within the character of Othello, whose tragic flaws lead him down a dark path. Through the use of dramatic irony and metaphor, Shakespeare masterfully portrays the intricacies of Othello's downfall. One of the most significant literary devices employed by Shakespeare in 'Othello' is dramatic irony, which reveals the stark contrast between what the audience knows and what Othello perceives. From the onset of the play, viewers are made privy to Iago's duplicitous intentions. Iago's proclamation, 'I am not what I am' (Act 1, Scene 1), serves as a warning of his deceitful nature. The audience, aware of Iago’s scheme, witnesses Othello’s growing trust in Iago—a trust that ultimately becomes his undoing. As Othello refers to Iago as 'honest Iago' on numerous occasions, the dramatic irony intensifies, highlighting the tragic hero’s inability to see through the façade that Iago constructs. Jealousy, as depicted through the metaphor of the 'green-eyed monster,' is another potent force that Shakespeare wields to illustrate Othello's tragic flaw. Iago cunningly plants the seeds of doubt in Othello’s mind, suggesting that Desdemona is unfaithful. The metaphor comes alive when Iago warns Othello against the very emotion he intends to incite: 'O, beware, my lord, of jealousy; It is the green-eyed monster which doth mock the meat it feeds on' (Act 3, Scene 3). This imagery paints jealousy as a monstrous, consuming force that feeds on Othello’s insecurities, distorting his perception of reality. The metaphor signifies how jealousy, once ignited, takes on a life of its own, devouring Othello's reason and leading him towards irrationality and violence. Moreover, the tragic flaw of Othello's susceptibility to manipulation is underscored by Shakespeare's use of linguistic techniques in Iago’s speeches. Iago’s manipulation relies heavily on insinuation and suggestion, subtly weaponizing words to bend Othello's will. The use of asides and soliloquies affords the audience insight into Iago’s machinations, further enhancing the dramatic irony. Phrases like “I like not that” (Act 3, Scene 3) are strategically designed to breed suspicion without direct accusation, showcasing Iago’s prowess in exploiting Othello’s vulnerabilities. As the play progresses, Othello’s language transforms, mirroring his descent into jealousy-fueled madness. His once eloquent and commanding speech becomes fragmented and chaotic, reflecting his internal turmoil. The shift in Othello's diction and syntax encapsulates his unraveling, conveying the profound impact of Iago’s manipulation. This transformation is poignantly illustrated in Othello's speech, wherein he declares, “Farewell the tranquil mind! Farewell content!” (Act 3, Scene 3), signaling the irrevocable loss of his sanity and the ominous downfall that awaits. In conclusion, Shakespeare’s 'Othello' is a masterful exploration of the tragic flaws inherent in human nature, particularly jealousy and susceptibility to manipulation. Through the literary devices of dramatic irony and metaphor, Shakespeare crafts a narrative that is both compelling and heart-wrenching. The audience is left to ponder the devastating consequences of unchecked emotions and the pernicious influence of malevolent forces, as embodied by Iago's manipulation and Othello's tragic vulnerability. The play remains a poignant reminder of the fragility of human integrity and the catastrophic outcomes of our darkest impulses."
    "The Tragic Flaw of Othello: A Study of Manipulation and Jealousy - William Shakespeare's 'Othello' is a masterful exploration of the tragic downfall of a noble hero, driven to ruin by his fatal flaws. At the heart of the play lies the potent theme of manipulation, orchestrated by the villainous Iago, and the resultant jealousy that ensnares Othello. Through the use of sophisticated literary devices such as dramatic irony and symbolism, Shakespeare crafts a narrative where the intersection of character flaws and external deceit leads to inevitable tragedy. In 'Othello,' Iago serves as the catalyst for the protagonist's destruction. His manipulative prowess is evident from the play's onset, particularly through dramatic irony. The audience is acutely aware of Iago's deceit and malicious intentions, which starkly contrasts with Othello's trust in him. This irony is encapsulated in Othello's accolade: 'Honest Iago' (Act 1, Scene 3), a recurring epithet that underscores the tragic disparity between perception and reality. The dramatic irony intensifies the audience's engagement, as they watch Othello spiral into ruin, all the while being privy to the truth that eludes him. Iago's manipulation is further reinforced through symbolism, particularly with the handkerchief, which becomes a pivotal plot device. The handkerchief, a gift from Othello to Desdemona, symbolizes marital fidelity and love. However, Iago cleverly exploits it to sow seeds of doubt in Othello's mind. When he plants it in Cassio's possession, it becomes a tangible 'proof' of Desdemona’s infidelity. This transformation of a symbol of love into one of betrayal illustrates how manipulation can distort reality, leading Othello to internalize unfounded jealousy. Othello's tragic flaw of jealousy is expertly conveyed through Shakespeare's use of imagery. As Iago whispers poison into his ear, Othello's language shifts from noble and measured to chaotic and violent. The imagery of chaos vividly portrays his internal turmoil, as seen in his exclamation: 'Farewell the tranquil mind; farewell content!' (Act 3, Scene 3). Such language reflects Othello’s unraveling composure, as he descends deeper into the throes of jealousy. This shift underscores how his inherent insecurities can be exploited, transforming him from a leader revered for his dignity into one who is consumed by baseless envy. The paradox of Othello's character is further highlighted through the juxtaposition of light and darkness, a recurring motif in the play. Initially, Othello is depicted as a figure of 'light,' embodying nobility and valor. However, as Iago's manipulations take hold, darkness encroaches upon him, symbolizing his moral and psychological deterioration. The final act vividly contrasts light and dark, culminating in Othello's misguided conviction that he must extinguish Desdemona's 'light' to restore his honor. This tragic misinterpretation, fueled by Iago's deceit, underscores the destructive power of internalized jealousy. In conclusion, 'Othello' serves as a timeless cautionary tale about the perils of manipulation and jealousy. Through the use of dramatic irony, symbolism, imagery, and motifs, Shakespeare intricately weaves a narrative that explores the intersection of personal flaws and external deceit. Othello's descent into tragedy is not merely the result of Iago's machinations but also a reflection of his own vulnerabilities. As the play unfolds, it becomes evident that the most formidable adversary lies within, as Othello's misplaced trust and unchecked jealousy lead to his ultimate undoing."
)

# Initialize the Tkinter app
root = tk.Tk()
root.title("Verifiery")
root.geometry("800x600")
root.resizable(False, False)
root.configure(bg="#51586D")

# Tkinter UI
title_label = tk.Label(root, text="verifiery 0.9a", font=("Itim", 36, "bold"), fg="white", bg="#51586D")
title_label.pack(pady=(20, 10))
# text placeholder stuff
def add_placeholder(event=None):
    if text_input.get("1.0", "end-1c") == "":
        text_input.insert("1.0", "Type here...")
        text_input.config(fg="#888888")
def remove_placeholder(event=None):
    if text_input.get("1.0", "end-1c") == "Type here...":
        text_input.delete("1.0", "end")
        text_input.config(fg="white")

text_input = tk.Text(root, font=("Monospace", 12), fg="#888888", bg="#27272F", insertbackground="white", wrap=tk.WORD, height=4, bd=0, highlightthickness=0)
text_input.insert("1.0", "Type here...")
#logic placeholder putter
text_input.bind("<FocusIn>", remove_placeholder)
text_input.bind("<FocusOut>", add_placeholder)

text_input.pack(pady=10, padx=50, fill=tk.BOTH, expand=True)


output_label = tk.Label(
    root, 
    text="", 
    font=("Arial", 12, "bold"), 
    background="#51586D",  # Set background color
    foreground="white",    # Set text color to white
    wraplength=480, 
    anchor="w", 
    justify="left"
)
output_label.pack(pady=20, padx=20)

# AFB Logic
# contained here are the real brains of everything. try not to mess it up.
# Extract the score from the response
def extract_score(input_string):
    match = re.search(r"score:\((\d\.\d{2})\)", input_string.strip())
    if match:
        return float(match.group(1))
    else:
        return None
# Process the user's input
def main(userEssayIn):
    main2(userEssayIn)
    try:
        total_score = 0
        runs = 5  # Number of repetitions
        successRuns = 0

        for i in range(runs):
            print("Round "+ str(i+1))
            prompt = userEssayIn
            completion = client.chat.completions.create(
                model="gpt-4o",
                store=True,
                messages=[
                    {"role": "developer", "content": instructions},
                    {"role": "developer", "content": AiSamples},
                    {"role": "developer", "content": HumanSamples},
                    {"role": "user", "content": prompt}
                ]
            )
            #debug print, log response
            print(completion.choices[0].message.content)
            response = completion.choices[0].message.content
            
            #score extract, debug out, and log into avg
            score = extract_score(response)
            print(str(extract_score(response)))
            if score is not None:
                total_score += score
                successRuns += 1
            else:
                print(f"Failed to extract score in round {i + 1}")
    
        avg_score = total_score / successRuns if successRuns > 0 else 0
        return avg_score
    except Exception as e:
        print(f"Error: {e}")
        return None
# Trigger processing
def process_input():
    output_label.config(text="Don't worry, I haven't crashed! I'm just a bit slow. :)")
    
    user_input = text_input.get("1.0", tk.END).strip()
    if not user_input:
        output_label.config(text="Enter a valid input.")
        return
    elif len(user_input) > MAX_CHARS:
        output_label.config(text="Character limit exceeded.")
        return

    avg_score = main(user_input)

    if avg_score is not None:
        output_label.config(text=f"Our Confidence it's AI: {avg_score*100}%")
    else:
        output_label.config(text="An error occurred during processing.")



# Tkinter: button and colors
def on_press(event):
    submit_button.config(bg="#BEBEBE")

def on_release(event):
    submit_button.config(bg="#D9D9D9")

submit_button = tk.Button(root, text="check for AI", font=("Arial", 16, "bold"), fg="black", bg="#D9D9D9", activebackground="#BEBEBE", relief="flat", bd=0, height=2, width=10, highlightthickness=0, command=process_input)
submit_button.bind("<ButtonPress>", on_press)
submit_button.bind("<ButtonRelease>", on_release)
submit_button.pack(padx=20, pady=20)

# Run the app
root.mainloop()
